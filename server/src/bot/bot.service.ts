import { Injectable, OnModuleInit } from '@nestjs/common';
import TelegramBot from 'node-telegram-bot-api';
import PQueue from 'p-queue';
import { PrismaService } from 'src/prisma/prisma.service';
import { keyboardType } from './types';

@Injectable()
export class BotService implements OnModuleInit {
    private bot: TelegramBot;
    private readonly chatID: number;
    private readonly queue = new PQueue({
        concurrency: 1,
        interval: 300
    });

    constructor(private readonly prisma: PrismaService) {
        this.chatID = parseInt(process.env.CHAT_ID as string) as number;
    };

    onModuleInit() {
        this.bot = new TelegramBot(process.env.TG_BOT_TOKEN as string, { polling: true });
        this.setupListeners();
        this.setCommands();
    };

    private async setCommands() {
        try {
            await this.bot.setMyCommands([
                { command: 'start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
                { command: 'get_senders', description: '–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π' },
                { command: 'clear_records_db', description: '–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö' },
            ]);
        } catch (error) {
            console.log("Error when installing commands:", error);
        };
    };

    private async buttonMenu() {
        const keyboard: string[][] = [['–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π', '–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö']];

        const options = {
            reply_markup: {
                keyboard: keyboard,
                resize_keyboard: true,
                one_time_keyboard: false
            }
        };

        let res = `üéâ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! üëã\n–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Ö–æ–¥—è—â–∏–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ üì©.\n\n`;
        res += `‚Ä¢ /get_senders - üìú –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ–≥–¥–∞-–ª–∏–±–æ –ø—Ä–∏—Å—ã–ª–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n`;
        res += `‚Ä¢ /clear_records_db - ‚ö†Ô∏è –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö (–±—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω!) üóëÔ∏è\n\n`;
        res += `‚Ä¢ /start - üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –Ω–∞—á–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ ‚ôªÔ∏è`;

        this.enqueueMessage(this.chatID, res, options as any)
    };

    private splitMessage(message: string, maxLenght: number = 4096): string[] { //—Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4096 —Å–∏–º–≤–æ–ª–æ–≤
        const parts: string[] = [];
        for (let i = 0; i < message.length; i += maxLenght) {
            parts.push(message.substring(i, i + maxLenght));
        };
        return parts;
    };

    private sendMessage(chat_id: number, message: string, options?: TelegramBot.SendMessageOptions): Promise<TelegramBot.Message> {  //—Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        try {
            const executeResult = this.bot.sendMessage(chat_id, message, options);
            return executeResult;
        } catch (error) {
            console.log("Message sending error!!!");
            throw error;
        };
    };

    private editMessage(chat_id: number, message_id: number, text: string, options?: TelegramBot.EditMessageTextOptions) {
        this.bot.editMessageText(text, {
            chat_id: chat_id,
            message_id: message_id,
            ...options
        });
    };

    async enqueueMessage(chat_id: number, message: string, options?: TelegramBot.SendMessageOptions): Promise<number | null> {  //—Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ sendMessage —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –≤ 300–º—Å
        try {
            let messageID: null | number = null;
            await this.queue.add(async () => {
                try {
                    const executionResult = await this.sendMessage(chat_id, message, options);
                    console.log("The message has been sent");
                    messageID = executionResult.message_id;
                }
                catch (error) {
                    console.log("Message sending error!!!");
                    throw error;
                };
            });
            console.log("The message has been added to the queue!");
            return messageID;
        } catch (error) {
            console.error("Error when adding a task to the queue:", error);
            return null;
        }
    };

    private setupListeners() {
        this.bot.onText(/\/start/, (msg) => {
            try {
                if(Number(msg.chat.id) === Number(this.chatID)){
                    this.buttonMenu();
                }
                else{
                    this.enqueueMessage(msg.chat.id, '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!!!');
                };
            } 
            catch (error) {
                console.log("Startup error:", error);
                this.enqueueMessage(this.chatID, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ ü§ñ!!!")
            }
        });

        this.bot.onText(/\/get_senders|–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π/i, async () => {
            try {
                const senders = await this.prisma.messagesIP.findMany({
                    select: {
                        id: true,
                        name: true,
                        contacts: true
                    }
                });

                if (senders.length === 0) {
                    this.enqueueMessage(this.chatID, 'ü§î –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!!!\n ü§∑‚Äç‚ôÇÔ∏è –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Å–æ–æ–±—â–µ–Ω–∏—è.');
                    return;
                };

                let res = `‚ú® –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è ‚ú®\n===========================\n`;
                senders.forEach((sender) => {
                    res += `üë§ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: ${sender.id}\n`;
                    res += `‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: ${sender.name}\n`;
                    res += `üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${sender.contacts}\n===========================\n`;
                });

                let keyboard: keyboardType[][] = [];
                senders.forEach((sender) => {
                    keyboard.push([{
                        text: `üë§ ${sender.name} (ID: ${sender.id})`,
                        callback_data: `get_sender_data:${sender.id}`
                    }]);
                });

                let options = {
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                };

                const messageParts = this.splitMessage(res);

                for (let i = 0; i < messageParts.length; i++) {
                    const part = messageParts[i];
                    if (i === messageParts.length - 1) {
                        this.enqueueMessage(this.chatID, part, options);
                    }
                    else {
                        this.enqueueMessage(this.chatID, part);
                    };
                };
            }
            catch (error) {
                console.log("Server error when trying to get a list of all senders:", error);
                this.enqueueMessage(this.chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞! ‚ö†Ô∏è\n–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π!!!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            };
        });

        this.bot.onText(/\/clear_records_db|–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö/i, async () => {
            try {
                let res = `üö® –í–Ω–∏–º–∞–Ω–∏–µ! üö®\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–±–æ –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –ü–û–õ–ù–û–ô –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!`;

                const messageID: null | number = await this.enqueueMessage(this.chatID, res);

                let keyboard: keyboardType[][] = [];

                if (messageID) {
                    keyboard.push([
                        {
                            text: "–î–∞ ‚úÖ",
                            callback_data: `confirm_clear_records_db/${messageID}`
                        },
                        {
                            text: "–ù–µ—Ç ‚ùå",
                            callback_data: `cancel_clear_records_db/${messageID}`
                        }
                    ]);

                    const options = {
                        reply_markup: {
                            inline_keyboard: keyboard
                        }
                    };

                    await this.editMessage(this.chatID, messageID, res, options);
                }
                else {
                    await this.enqueueMessage(this.chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞! ‚ö†Ô∏è\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞!!!\nüò± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É ‚Ä¢ /clear_records_db.")
                };
            }
            catch (error) {
                console.log("Error when trying to clear the database:", error);
                this.enqueueMessage(this.chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞! ‚ö†Ô∏è\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!!!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            };
        })

        this.bot.on("callback_query", async (callbackQuery) => {
            const { data } = callbackQuery;

            if (data?.startsWith("get_sender_data:")) {
                const senderID = parseInt(data.split(':')[1]);
                if (isNaN(senderID)) {
                    this.enqueueMessage(this.chatID, "‚õîÔ∏è –û—à–∏–±–∫–∞! ‚õîÔ∏è\n–ù–µ–≤–µ—Ä–Ω—ã–π ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è!!!\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID.");
                    return;
                };

                try {
                    const sender = await this.prisma.messagesIP.findUnique({
                        where: { id: senderID },
                        include: { messages: true }
                    });

                    if (!sender) {
                        this.enqueueMessage(this.chatID, "üîç –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!!!\nüßê –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
                        return;
                    };

                    let res = `‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ ${sender.name} (ID: ${sender.id})\n------------------------------------------\n`;
                    res += `üë§ –ò–º—è: ${sender.name}\n------------------------------------------\n`;
                    res += `üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: ${sender.contacts}\n------------------------------------------\n`;
                    res += `üí¨ –°–æ–æ–±—â–µ–Ω–∏—è:\n`;

                    if (sender.messages && sender.messages.length > 0) {
                        sender.messages.forEach((msg) => {
                            res += `‚Äî ‚û°Ô∏è ${msg.message}\n`;
                        });
                    }
                    else {
                        res += `–°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!!!`;
                    };

                    const keyboard: keyboardType[][] = [];

                    keyboard.push([{
                        text: `–£–¥–∞–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è üöØ`,
                        callback_data: `delete_current_sender:${sender.id}`
                    }])

                    const options = {
                        reply_markup: {
                            inline_keyboard: keyboard
                        }
                    };

                    const messageParts = this.splitMessage(res);

                    for (let i = 0; i < messageParts.length; i++) {
                        let part = messageParts[i];
                        if (i === messageParts.length - 1) {
                            this.enqueueMessage(this.chatID, part, options);
                        }
                        else {
                            this.enqueueMessage(this.chatID, part);
                        }
                    };
                }
                catch (error) {
                    console.log("Server error when trying to receive all sender's data:", error);
                    this.enqueueMessage(this.chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞! ‚ö†Ô∏è\n–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ!!!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
                };
            };

            if (data?.startsWith('delete_current_sender:')) {
                const senderID = parseInt(data.split(':')[1]);

                if (isNaN(senderID)) {
                    this.enqueueMessage(this.chatID, '‚õîÔ∏è –û—à–∏–±–∫–∞! ‚õîÔ∏è\n–ù–µ–≤–µ—Ä–Ω—ã–π ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è!!!\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID.');
                    return;
                };

                try {
                    const sender = await this.prisma.messagesIP.findUnique({
                        where: { id: senderID }
                    });

                    if (!sender) {
                        this.enqueueMessage(this.chatID, 'üîç –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!!!\nüßê –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
                        return;
                    };

                    let res = `‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! ‚ö†Ô∏è\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ ${sender.name} (ID: ${sender.id})?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!`;

                    let keyboard: keyboardType[][] = [];

                    let messageID: number | null = await this.enqueueMessage(this.chatID, res);


                    if (messageID) {
                        keyboard.push([
                            {
                                text: "–î–∞ ‚úÖ",
                                callback_data: `confirm_delete_current_sender:${sender.id}/${messageID}`
                            },
                            {
                                text: "–ù–µ—Ç ‚ùå",
                                callback_data: `cancel_delete_current_sender/${messageID}`
                            }
                        ]);

                        const options = {
                            reply_markup: {
                                inline_keyboard: keyboard
                            }
                        };

                        await this.editMessage(this.chatID, messageID, res, options);
                    }
                    else {
                        await this.enqueueMessage(this.chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞! ‚ö†Ô∏è\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞!!!\nüò± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üöØ¬ª");
                    };
                }
                catch (error) {
                    console.log("Server error when trying to delete sender data:", error);
                    this.enqueueMessage(this.chatID, "‚ùå –û—à–∏–±–∫–∞! ‚ùå\n–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ!!!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
                }
            };

            if (data?.startsWith('confirm_delete_current_sender:')) {
                const senderID = parseInt(data.split(':')[1]);
                const messageID = parseInt(data.split('/')[1]);

                if (isNaN(senderID)) {
                    this.enqueueMessage(this.chatID, '‚õîÔ∏è –û—à–∏–±–∫–∞! ‚õîÔ∏è\n–ù–µ–≤–µ—Ä–Ω—ã–π ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è!!!\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID.');
                    return;
                };

                try {
                    const sender = await this.prisma.messagesIP.findUnique({
                        where: { id: senderID }
                    });

                    if (!sender) {
                        this.enqueueMessage(this.chatID, 'üîç –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω!!!\nüßê –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.');
                        return;
                    };

                    try {
                        if (messageID) {
                            await this.prisma.messagesIP.delete({
                                where: { id: sender.id },
                                include: { messages: true }
                            });

                            let res = `‚úÖ –ó–∞–ø–∏—Å—å –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ ${sender.name} (ID: ${sender.id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞! üëåüóëÔ∏è`;
                            await this.editMessage(this.chatID, messageID, res);
                        }
                        else {
                            await this.enqueueMessage(this.chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞! ‚ö†Ô∏è\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞!!!\nüò± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üöØ¬ª");
                        };
                    }
                    catch (error) {
                        console.log("Error deleting sender:", error);
                        this.enqueueMessage(this.chatID, '‚ö†Ô∏è –û—à–∏–±–∫–∞! ‚ö†Ô∏è\n–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ!!!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
                    };
                }
                catch (error) {
                    console.log("Server error when confirming the deletion of the sender record:", error);
                    this.enqueueMessage(this.chatID, '‚ùå –û—à–∏–±–∫–∞! ‚ùå\n–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ!!!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                };
            };

            if (data?.startsWith('cancel_delete_current_sender')) {
                const messageID = parseInt(data.split('/')[1]);

                if (messageID) {
                    let res = `‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ –æ—Ç–º–µ–Ω–µ–Ω–æ üôÖ‚Äç‚ôÇÔ∏è.\n–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!`;
                    await this.editMessage(this.chatID, messageID, res);
                }
                else {
                    await this.enqueueMessage(this.chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞! ‚ö†Ô∏è\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞!\nüò± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è üöØ¬ª");
                };
            };

            if (data?.startsWith("confirm_clear_records_db")) {
                const messageID = parseInt(data.split('/')[1]);

                try {
                    if (messageID) {
                        let res = `‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞! üëåüóëÔ∏è\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç! –ù–∞—á–Ω–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞! üìù`;
                        await this.prisma.messagesIP.deleteMany({});
                        await this.editMessage(this.chatID, messageID, res);
                    }
                    else {
                        await this.enqueueMessage(this.chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞! ‚ö†Ô∏è\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞!!!\nüò± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É ‚Ä¢ /clear_records_db.");
                    };
                }
                catch (error) {
                    console.log("Error when clearing the database:", error);
                    this.enqueueMessage(this.chatID, '‚ùå –û—à–∏–±–∫–∞! ‚ùå\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!!!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                };
            };

            if (data?.startsWith("cancel_clear_records_db")) {
                const messageID = parseInt(data.split('/')[1]);

                if (messageID) {
                    let res = `‚ùå –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–∞ üôÖ‚Äç‚ôÇÔ∏è.\n–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!`;
                    await this.editMessage(this.chatID, messageID, res);
                }
                else {
                    await this.enqueueMessage(this.chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞! ‚ö†Ô∏è\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞!!!\nüò± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É ‚Ä¢ /clear_records_db.");
                };
            };
        });

        this.bot.on("polling_error", (error) => {
            console.log(error);
            this.enqueueMessage(this.chatID, "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!!!");
        });
    };
};